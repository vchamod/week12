#include <iostream>
#include <vector>
#include <limits>
#include <queue>

const int INF = std::numeric_limits<int>::max();

std::vector<int> dijkstra(const std::vector<std::vector<int>>& adjacency_matrix, int source) {
    int num_cities = adjacency_matrix.size();
    std::vector<int> distances(num_cities, INF);
    std::vector<bool> visited(num_cities, false);
    distances[source] = 0;

    auto compare = [](std::pair<int, int>& a, std::pair<int, int>& b) {
        return a.second > b.second;
    };
    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, decltype(compare)> pq(compare);
    pq.push({ source, 0 });

    while (!pq.empty()) {
        int current_city = pq.top().first;
        pq.pop();

        if (visited[current_city]) {
            continue;
        }
        visited[current_city] = true;

        for (int neighbor = 0; neighbor < num_cities; ++neighbor) {
            if (adjacency_matrix[current_city][neighbor] > 0 && !visited[neighbor]) {
                int new_distance = distances[current_city] + adjacency_matrix[current_city][neighbor];
                if (new_distance < distances[neighbor]) {
                    distances[neighbor] = new_distance;
                    pq.push({ neighbor, new_distance });
                }
            }
        }
    }

    return distances;
}

int main() {
    std::vector<std::vector<int>> adjacency_matrix = {
        {0, 10, 0, 0, 15, 5},
        {10, 0, 10, 30, 0, 0},
        {0, 10, 0, 12, 5, 0},
        {0, 30, 12, 0, 0, 20},
        {15, 0, 5, 0, 0, 0},
        {5, 0, 0, 20, 0, 0}
    };

    int num_cities = adjacency_matrix.size();
    for (int source = 0; source < num_cities; ++source) {
        std::vector<int> shortest_distances = dijkstra(adjacency_matrix, source);
        std::cout << "Shortest distances from city " << source << ":\n";
        for (int i = 0; i < num_cities; ++i) {
            std::cout << "City " << i << ": " << shortest_distances[i] << "\n";
        }
        std::cout << "\n";
    }

    return 0;
}
